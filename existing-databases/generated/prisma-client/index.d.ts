// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  album: (where?: AlbumWhereInput) => Promise<boolean>;
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  song: (where?: SongWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  album: (where: AlbumWhereUniqueInput) => AlbumNullablePromise;
  albums: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Album>;
  albumsConnection: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AlbumConnectionPromise;
  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  song: (where: SongWhereUniqueInput) => SongNullablePromise;
  songs: (args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Song>;
  songsConnection: (args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SongConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAlbum: (data: AlbumCreateInput) => AlbumPromise;
  updateAlbum: (args: {
    data: AlbumUpdateInput;
    where: AlbumWhereUniqueInput;
  }) => AlbumPromise;
  updateManyAlbums: (args: {
    data: AlbumUpdateManyMutationInput;
    where?: AlbumWhereInput;
  }) => BatchPayloadPromise;
  upsertAlbum: (args: {
    where: AlbumWhereUniqueInput;
    create: AlbumCreateInput;
    update: AlbumUpdateInput;
  }) => AlbumPromise;
  deleteAlbum: (where: AlbumWhereUniqueInput) => AlbumPromise;
  deleteManyAlbums: (where?: AlbumWhereInput) => BatchPayloadPromise;
  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createSong: (data: SongCreateInput) => SongPromise;
  updateSong: (args: {
    data: SongUpdateInput;
    where: SongWhereUniqueInput;
  }) => SongPromise;
  updateManySongs: (args: {
    data: SongUpdateManyMutationInput;
    where?: SongWhereInput;
  }) => BatchPayloadPromise;
  upsertSong: (args: {
    where: SongWhereUniqueInput;
    create: SongCreateInput;
    update: SongUpdateInput;
  }) => SongPromise;
  deleteSong: (where: SongWhereUniqueInput) => SongPromise;
  deleteManySongs: (where?: SongWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  album: (
    where?: AlbumSubscriptionWhereInput
  ) => AlbumSubscriptionPayloadSubscription;
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  song: (
    where?: SongSubscriptionWhereInput
  ) => SongSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AlbumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "artworkUrl_ASC"
  | "artworkUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SongOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "audioUrl_ASC"
  | "audioUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AlbumWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface AlbumWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  artistId?: Maybe<ArtistWhereInput>;
  artworkUrl?: Maybe<String>;
  artworkUrl_not?: Maybe<String>;
  artworkUrl_in?: Maybe<String[] | String>;
  artworkUrl_not_in?: Maybe<String[] | String>;
  artworkUrl_lt?: Maybe<String>;
  artworkUrl_lte?: Maybe<String>;
  artworkUrl_gt?: Maybe<String>;
  artworkUrl_gte?: Maybe<String>;
  artworkUrl_contains?: Maybe<String>;
  artworkUrl_not_contains?: Maybe<String>;
  artworkUrl_starts_with?: Maybe<String>;
  artworkUrl_not_starts_with?: Maybe<String>;
  artworkUrl_ends_with?: Maybe<String>;
  artworkUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  OR?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  NOT?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
}

export interface ArtistWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export interface SongWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  albumId?: Maybe<AlbumWhereInput>;
  artistId?: Maybe<ArtistWhereInput>;
  audioUrl?: Maybe<String>;
  audioUrl_not?: Maybe<String>;
  audioUrl_in?: Maybe<String[] | String>;
  audioUrl_not_in?: Maybe<String[] | String>;
  audioUrl_lt?: Maybe<String>;
  audioUrl_lte?: Maybe<String>;
  audioUrl_gt?: Maybe<String>;
  audioUrl_gte?: Maybe<String>;
  audioUrl_contains?: Maybe<String>;
  audioUrl_not_contains?: Maybe<String>;
  audioUrl_starts_with?: Maybe<String>;
  audioUrl_not_starts_with?: Maybe<String>;
  audioUrl_ends_with?: Maybe<String>;
  audioUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SongWhereInput[] | SongWhereInput>;
  OR?: Maybe<SongWhereInput[] | SongWhereInput>;
  NOT?: Maybe<SongWhereInput[] | SongWhereInput>;
}

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export type SongWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface AlbumCreateInput {
  artistId?: Maybe<ArtistCreateOneWithoutAlbumsInput>;
  artworkUrl?: Maybe<String>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutAlbumIdInput>;
}

export interface ArtistCreateOneWithoutAlbumsInput {
  create?: Maybe<ArtistCreateWithoutAlbumsInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutAlbumsInput {
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistIdInput>;
}

export interface SongCreateManyWithoutArtistIdInput {
  create?: Maybe<
    SongCreateWithoutArtistIdInput[] | SongCreateWithoutArtistIdInput
  >;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface SongCreateWithoutArtistIdInput {
  albumId?: Maybe<AlbumCreateOneWithoutSongsInput>;
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name: String;
}

export interface AlbumCreateOneWithoutSongsInput {
  create?: Maybe<AlbumCreateWithoutSongsInput>;
  connect?: Maybe<AlbumWhereUniqueInput>;
}

export interface AlbumCreateWithoutSongsInput {
  artistId?: Maybe<ArtistCreateOneWithoutAlbumsInput>;
  artworkUrl?: Maybe<String>;
  name: String;
}

export interface SongCreateManyWithoutAlbumIdInput {
  create?: Maybe<
    SongCreateWithoutAlbumIdInput[] | SongCreateWithoutAlbumIdInput
  >;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface SongCreateWithoutAlbumIdInput {
  artistId?: Maybe<ArtistCreateOneWithoutSongsInput>;
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name: String;
}

export interface ArtistCreateOneWithoutSongsInput {
  create?: Maybe<ArtistCreateWithoutSongsInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistCreateWithoutSongsInput {
  albums?: Maybe<AlbumCreateManyWithoutArtistIdInput>;
  name: String;
}

export interface AlbumCreateManyWithoutArtistIdInput {
  create?: Maybe<
    AlbumCreateWithoutArtistIdInput[] | AlbumCreateWithoutArtistIdInput
  >;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface AlbumCreateWithoutArtistIdInput {
  artworkUrl?: Maybe<String>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutAlbumIdInput>;
}

export interface AlbumUpdateInput {
  artistId?: Maybe<ArtistUpdateOneWithoutAlbumsInput>;
  artworkUrl?: Maybe<String>;
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutAlbumIdInput>;
}

export interface ArtistUpdateOneWithoutAlbumsInput {
  create?: Maybe<ArtistCreateWithoutAlbumsInput>;
  update?: Maybe<ArtistUpdateWithoutAlbumsDataInput>;
  upsert?: Maybe<ArtistUpsertWithoutAlbumsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistUpdateWithoutAlbumsDataInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistIdInput>;
}

export interface SongUpdateManyWithoutArtistIdInput {
  create?: Maybe<
    SongCreateWithoutArtistIdInput[] | SongCreateWithoutArtistIdInput
  >;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutArtistIdInput[]
    | SongUpdateWithWhereUniqueWithoutArtistIdInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutArtistIdInput[]
    | SongUpsertWithWhereUniqueWithoutArtistIdInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateWithWhereUniqueWithoutArtistIdInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutArtistIdDataInput;
}

export interface SongUpdateWithoutArtistIdDataInput {
  albumId?: Maybe<AlbumUpdateOneWithoutSongsInput>;
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface AlbumUpdateOneWithoutSongsInput {
  create?: Maybe<AlbumCreateWithoutSongsInput>;
  update?: Maybe<AlbumUpdateWithoutSongsDataInput>;
  upsert?: Maybe<AlbumUpsertWithoutSongsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AlbumWhereUniqueInput>;
}

export interface AlbumUpdateWithoutSongsDataInput {
  artistId?: Maybe<ArtistUpdateOneWithoutAlbumsInput>;
  artworkUrl?: Maybe<String>;
  name?: Maybe<String>;
}

export interface AlbumUpsertWithoutSongsInput {
  update: AlbumUpdateWithoutSongsDataInput;
  create: AlbumCreateWithoutSongsInput;
}

export interface SongUpsertWithWhereUniqueWithoutArtistIdInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutArtistIdDataInput;
  create: SongCreateWithoutArtistIdInput;
}

export interface SongScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  audioUrl?: Maybe<String>;
  audioUrl_not?: Maybe<String>;
  audioUrl_in?: Maybe<String[] | String>;
  audioUrl_not_in?: Maybe<String[] | String>;
  audioUrl_lt?: Maybe<String>;
  audioUrl_lte?: Maybe<String>;
  audioUrl_gt?: Maybe<String>;
  audioUrl_gte?: Maybe<String>;
  audioUrl_contains?: Maybe<String>;
  audioUrl_not_contains?: Maybe<String>;
  audioUrl_starts_with?: Maybe<String>;
  audioUrl_not_starts_with?: Maybe<String>;
  audioUrl_ends_with?: Maybe<String>;
  audioUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  genre?: Maybe<String>;
  genre_not?: Maybe<String>;
  genre_in?: Maybe<String[] | String>;
  genre_not_in?: Maybe<String[] | String>;
  genre_lt?: Maybe<String>;
  genre_lte?: Maybe<String>;
  genre_gt?: Maybe<String>;
  genre_gte?: Maybe<String>;
  genre_contains?: Maybe<String>;
  genre_not_contains?: Maybe<String>;
  genre_starts_with?: Maybe<String>;
  genre_not_starts_with?: Maybe<String>;
  genre_ends_with?: Maybe<String>;
  genre_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  OR?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  NOT?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
}

export interface SongUpdateManyWithWhereNestedInput {
  where: SongScalarWhereInput;
  data: SongUpdateManyDataInput;
}

export interface SongUpdateManyDataInput {
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ArtistUpsertWithoutAlbumsInput {
  update: ArtistUpdateWithoutAlbumsDataInput;
  create: ArtistCreateWithoutAlbumsInput;
}

export interface SongUpdateManyWithoutAlbumIdInput {
  create?: Maybe<
    SongCreateWithoutAlbumIdInput[] | SongCreateWithoutAlbumIdInput
  >;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutAlbumIdInput[]
    | SongUpdateWithWhereUniqueWithoutAlbumIdInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutAlbumIdInput[]
    | SongUpsertWithWhereUniqueWithoutAlbumIdInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateWithWhereUniqueWithoutAlbumIdInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutAlbumIdDataInput;
}

export interface SongUpdateWithoutAlbumIdDataInput {
  artistId?: Maybe<ArtistUpdateOneWithoutSongsInput>;
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ArtistUpdateOneWithoutSongsInput {
  create?: Maybe<ArtistCreateWithoutSongsInput>;
  update?: Maybe<ArtistUpdateWithoutSongsDataInput>;
  upsert?: Maybe<ArtistUpsertWithoutSongsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistUpdateWithoutSongsDataInput {
  albums?: Maybe<AlbumUpdateManyWithoutArtistIdInput>;
  name?: Maybe<String>;
}

export interface AlbumUpdateManyWithoutArtistIdInput {
  create?: Maybe<
    AlbumCreateWithoutArtistIdInput[] | AlbumCreateWithoutArtistIdInput
  >;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutArtistIdInput[]
    | AlbumUpdateWithWhereUniqueWithoutArtistIdInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutArtistIdInput[]
    | AlbumUpsertWithWhereUniqueWithoutArtistIdInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumUpdateWithWhereUniqueWithoutArtistIdInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutArtistIdDataInput;
}

export interface AlbumUpdateWithoutArtistIdDataInput {
  artworkUrl?: Maybe<String>;
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutAlbumIdInput>;
}

export interface AlbumUpsertWithWhereUniqueWithoutArtistIdInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutArtistIdDataInput;
  create: AlbumCreateWithoutArtistIdInput;
}

export interface AlbumScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  artworkUrl?: Maybe<String>;
  artworkUrl_not?: Maybe<String>;
  artworkUrl_in?: Maybe<String[] | String>;
  artworkUrl_not_in?: Maybe<String[] | String>;
  artworkUrl_lt?: Maybe<String>;
  artworkUrl_lte?: Maybe<String>;
  artworkUrl_gt?: Maybe<String>;
  artworkUrl_gte?: Maybe<String>;
  artworkUrl_contains?: Maybe<String>;
  artworkUrl_not_contains?: Maybe<String>;
  artworkUrl_starts_with?: Maybe<String>;
  artworkUrl_not_starts_with?: Maybe<String>;
  artworkUrl_ends_with?: Maybe<String>;
  artworkUrl_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  OR?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  NOT?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
}

export interface AlbumUpdateManyWithWhereNestedInput {
  where: AlbumScalarWhereInput;
  data: AlbumUpdateManyDataInput;
}

export interface AlbumUpdateManyDataInput {
  artworkUrl?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ArtistUpsertWithoutSongsInput {
  update: ArtistUpdateWithoutSongsDataInput;
  create: ArtistCreateWithoutSongsInput;
}

export interface SongUpsertWithWhereUniqueWithoutAlbumIdInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutAlbumIdDataInput;
  create: SongCreateWithoutAlbumIdInput;
}

export interface AlbumUpdateManyMutationInput {
  artworkUrl?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ArtistCreateInput {
  albums?: Maybe<AlbumCreateManyWithoutArtistIdInput>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistIdInput>;
}

export interface ArtistUpdateInput {
  albums?: Maybe<AlbumUpdateManyWithoutArtistIdInput>;
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistIdInput>;
}

export interface ArtistUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SongCreateInput {
  albumId?: Maybe<AlbumCreateOneWithoutSongsInput>;
  artistId?: Maybe<ArtistCreateOneWithoutSongsInput>;
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name: String;
}

export interface SongUpdateInput {
  albumId?: Maybe<AlbumUpdateOneWithoutSongsInput>;
  artistId?: Maybe<ArtistUpdateOneWithoutSongsInput>;
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface SongUpdateManyMutationInput {
  audioUrl?: Maybe<String>;
  genre?: Maybe<String>;
  name?: Maybe<String>;
}

export interface AlbumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AlbumWhereInput>;
  AND?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  OR?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  NOT?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface SongSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SongWhereInput>;
  AND?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
  OR?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
  NOT?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Album {
  id: Int;
  artworkUrl?: String;
  createdAt: DateTimeOutput;
  name: String;
  updatedAt: DateTimeOutput;
}

export interface AlbumPromise extends Promise<Album>, Fragmentable {
  id: () => Promise<Int>;
  artistId: <T = ArtistPromise>() => T;
  artworkUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AlbumSubscription
  extends Promise<AsyncIterator<Album>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  artistId: <T = ArtistSubscription>() => T;
  artworkUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AlbumNullablePromise
  extends Promise<Album | null>,
    Fragmentable {
  id: () => Promise<Int>;
  artistId: <T = ArtistPromise>() => T;
  artworkUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Artist {
  id: Int;
  createdAt: DateTimeOutput;
  name: String;
  updatedAt: DateTimeOutput;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<Int>;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<Int>;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Song {
  id: Int;
  audioUrl?: String;
  createdAt: DateTimeOutput;
  genre?: String;
  name: String;
  updatedAt: DateTimeOutput;
}

export interface SongPromise extends Promise<Song>, Fragmentable {
  id: () => Promise<Int>;
  albumId: <T = AlbumPromise>() => T;
  artistId: <T = ArtistPromise>() => T;
  audioUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SongSubscription
  extends Promise<AsyncIterator<Song>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  albumId: <T = AlbumSubscription>() => T;
  artistId: <T = ArtistSubscription>() => T;
  audioUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  genre: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SongNullablePromise
  extends Promise<Song | null>,
    Fragmentable {
  id: () => Promise<Int>;
  albumId: <T = AlbumPromise>() => T;
  artistId: <T = ArtistPromise>() => T;
  audioUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AlbumConnection {
  pageInfo: PageInfo;
  edges: AlbumEdge[];
}

export interface AlbumConnectionPromise
  extends Promise<AlbumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AlbumEdge>>() => T;
  aggregate: <T = AggregateAlbumPromise>() => T;
}

export interface AlbumConnectionSubscription
  extends Promise<AsyncIterator<AlbumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AlbumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAlbumSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AlbumEdge {
  node: Album;
  cursor: String;
}

export interface AlbumEdgePromise extends Promise<AlbumEdge>, Fragmentable {
  node: <T = AlbumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AlbumEdgeSubscription
  extends Promise<AsyncIterator<AlbumEdge>>,
    Fragmentable {
  node: <T = AlbumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAlbum {
  count: Int;
}

export interface AggregateAlbumPromise
  extends Promise<AggregateAlbum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAlbumSubscription
  extends Promise<AsyncIterator<AggregateAlbum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SongConnection {
  pageInfo: PageInfo;
  edges: SongEdge[];
}

export interface SongConnectionPromise
  extends Promise<SongConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SongEdge>>() => T;
  aggregate: <T = AggregateSongPromise>() => T;
}

export interface SongConnectionSubscription
  extends Promise<AsyncIterator<SongConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SongEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSongSubscription>() => T;
}

export interface SongEdge {
  node: Song;
  cursor: String;
}

export interface SongEdgePromise extends Promise<SongEdge>, Fragmentable {
  node: <T = SongPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SongEdgeSubscription
  extends Promise<AsyncIterator<SongEdge>>,
    Fragmentable {
  node: <T = SongSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSong {
  count: Int;
}

export interface AggregateSongPromise
  extends Promise<AggregateSong>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSongSubscription
  extends Promise<AsyncIterator<AggregateSong>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AlbumSubscriptionPayload {
  mutation: MutationType;
  node: Album;
  updatedFields: String[];
  previousValues: AlbumPreviousValues;
}

export interface AlbumSubscriptionPayloadPromise
  extends Promise<AlbumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AlbumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AlbumPreviousValuesPromise>() => T;
}

export interface AlbumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AlbumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AlbumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AlbumPreviousValuesSubscription>() => T;
}

export interface AlbumPreviousValues {
  id: Int;
  artworkUrl?: String;
  createdAt: DateTimeOutput;
  name: String;
  updatedAt: DateTimeOutput;
}

export interface AlbumPreviousValuesPromise
  extends Promise<AlbumPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  artworkUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AlbumPreviousValuesSubscription
  extends Promise<AsyncIterator<AlbumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  artworkUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface ArtistPreviousValues {
  id: Int;
  createdAt: DateTimeOutput;
  name: String;
  updatedAt: DateTimeOutput;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SongSubscriptionPayload {
  mutation: MutationType;
  node: Song;
  updatedFields: String[];
  previousValues: SongPreviousValues;
}

export interface SongSubscriptionPayloadPromise
  extends Promise<SongSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SongPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SongPreviousValuesPromise>() => T;
}

export interface SongSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SongSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SongSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SongPreviousValuesSubscription>() => T;
}

export interface SongPreviousValues {
  id: Int;
  audioUrl?: String;
  createdAt: DateTimeOutput;
  genre?: String;
  name: String;
  updatedAt: DateTimeOutput;
}

export interface SongPreviousValuesPromise
  extends Promise<SongPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  audioUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  genre: () => Promise<String>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SongPreviousValuesSubscription
  extends Promise<AsyncIterator<SongPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  audioUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  genre: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Album",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  },
  {
    name: "Song",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
